version: '3.8'

services:
  # Eureka Server (Service Registry)
  eureka-server:
    image: fooddeliveryapp/serviceregistry
    container_name: eureka-server
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - food-delivery-app_default

  # Cloud Gateway (Api Gateway)
  cloud-gateway:
    image: fooddeliveryapp/cloudgateway
    container_name: cloud-gateway
    ports:
      - "9090:9090"
    depends_on:
      - eureka-server
      - redis
    environment:
      SPRING_OKTA_CLIENT_ID: ${SPRING_OKTA_CLIENT_ID}
      SPRING_OKTA_CLIENT_SECRET: ${SPRING_OKTA_CLIENT_SECRET}
      EUREKA_SERVER_ADDRESS: http://eureka-server:8761/eureka
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9090/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - food-delivery-app_default

  # User Service
  user-service:
    image: fooddeliveryapp/userservice
    container_name: user-service
    ports:
      - "8085:8085"
    depends_on:
      - eureka-server
    environment:
      SPRING_OKTA_CLIENT_ID: ${SPRING_OKTA_CLIENT_ID}
      SPRING_OKTA_CLIENT_SECRET: ${SPRING_OKTA_CLIENT_SECRET}
      EUREKA_SERVER_ADDRESS: http://eureka-server:8761/eureka
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8085/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - food-delivery-app_default

  # Payment Service
  payment-service:
    image: fooddeliveryapp/paymentservice
    container_name: payment-service
    ports:
      - "8083:8083"
    depends_on:
      - eureka-server
      - payment-db
    environment:
      DB_HOST: payment-db
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      EUREKA_SERVER_ADDRESS: http://eureka-server:8761/eureka
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - food-delivery-app_default

  # Delivery Service
  delivery-service:
    image: fooddeliveryapp/deliveryservice
    container_name: delivery-service
    ports:
      - "8084:8084"
    depends_on:
      - eureka-server
      - kafka
      - delivery-db
    environment:
      DB_HOST: delivery-db
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      EUREKA_SERVER_ADDRESS: http://eureka-server:8761/eureka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8084/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - food-delivery-app_default

  # Order Service
  order-service:
    image: fooddeliveryapp/orderservice
    container_name: order-service
    ports:
      - "8082:8082"
    depends_on:
      - eureka-server
      - kafka
      - restaurant-service
      - payment-service
      - delivery-service
      - order-db
    environment:
      DB_HOST: order-db
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_OKTA_CLIENT_ID: ${SPRING_OKTA_CLIENT_ID}
      SPRING_OKTA_CLIENT_SECRET: ${SPRING_OKTA_CLIENT_SECRET}
      EUREKA_SERVER_ADDRESS: http://eureka-server:8761/eureka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - food-delivery-app_default

  # Restaurant Service
  restaurant-service:
    image: fooddeliveryapp/restaurantservice
    container_name: restaurant-service
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - restaurant-db
    environment:
      DB_HOST: restaurant-db
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      EUREKA_SERVER_ADDRESS: http://eureka-server:8761/eureka
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - food-delivery-app_default

  # Redis
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
      
  # Zookeeper
  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - food-delivery-app_default

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENER: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CREATE_TOPICS: "delivery-topic:1:1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - food-delivery-app_default

  # Payment Service Database
  payment-db:
    image: mcr.microsoft.com/mssql/server:latest
    container_name: payment-db
    ports:
      - "1435:1433"
    healthcheck:
      test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "${SPRING_DATASOURCE_PASSWORD}", "-Q", "SELECT 1 || exit 1", "-C"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./db-scripts/payment-init-script.sql:/docker-entrypoint-initdb.d/payment-init-script.sql
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    networks:
      - food-delivery-app_default

  # Delivery Service Database
  delivery-db:
    image: mcr.microsoft.com/mssql/server:latest
    container_name: delivery-db
    ports:
      - "1436:1433"
    healthcheck:
      test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "${SPRING_DATASOURCE_PASSWORD}", "-Q", "SELECT 1 || exit 1", "-C"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./db-scripts/delivery-init-script.sql:/docker-entrypoint-initdb.d/delivery-init-script.sql
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    networks:
      - food-delivery-app_default

  # Order Service Database
  order-db:
    image: mcr.microsoft.com/mssql/server:latest
    container_name: order-db
    ports:
      - "1437:1433"
    healthcheck:
      test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "${SPRING_DATASOURCE_PASSWORD}", "-Q", "SELECT 1 || exit 1", "-C"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./db-scripts/order-init-script.sql:/docker-entrypoint-initdb.d/order-init-script.sql
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    networks:
      - food-delivery-app_default

  # Restaurant Service Database
  restaurant-db:
    image: mcr.microsoft.com/mssql/server:latest
    container_name: restaurant-db
    ports:
      - "1438:1433"
    healthcheck:
      test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "${SPRING_DATASOURCE_PASSWORD}", "-Q", "SELECT 1 || exit 1", "-C"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
       - ./db-scripts/restaurant-init-script.sql:/docker-entrypoint-initdb.d/restaurant-init-script.sql
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    networks:
      - food-delivery-app_default
      
networks:
  food-delivery-app_default:
    driver: bridge
